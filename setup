#!/usr/bin/env bash

# Fail on first command error
set -e

red="\033[0;31m"
yellow="\033[0;33m"
restore="\033[0;0m"

error() {
    printf "${red}Error: %s!${restore}\n" "${1}"
    exit "${2:-1}"
}

warn() {
    printf "${yellow}Warning: %s.${restore}\n" "${1}"
}

log() {
    printf "Log: %s.\n" "${1}"
}

migrate_dir() {
    if [[ -d "$1" ]]; then
        cp -a "${1}/." "$2"
    fi
    rm -rf "$1"
}

link_file() {
  local _source="$1"
  local _dest="$2"
  # If the destination is a directory or a symbolic link, let's create the final destination by appending the basename
  # to it.
  if [[ -d "$_dest" || ! -L "$_dest" ]]; then
    _dest="${_dest}/$(basename "$_source")"
  fi
  ln -sF "$_source" "$_dest"
}

# Expand template file from first arg into second argument.
# Any bash variables defined at the point this is called can be used in the template.
# Define expansions like a bash variable.
expand_template() {
  eval "cat <<EOF
$(cat $1)
EOF" 2> /dev/null > $2
}

execute() {
    local _function
    _function="${1}"
    [[ "$(type -t "${_function}")" != "function" ]] &&
        error "Function (${_function}) does not exist"

    "${_function}" || error "${_function} failed"
}

execute_if_exists() {
    local _function
    _function="${1}"
    [[ "$(type -t "${_function}")" != "function" ]] && return 1

    "${_function}" || error "${_function} failed"
}

load_package() {
    local _package
    _package="${1}"
    local _package_setup
    _package_setup="${dotfiles}/${_package}/setup"

    if [[ ! -f "${_package_setup}" ]]; then
        error "package (${_package}) setup script does not exist"
    fi
    # shellcheck source=/dev/null
    source "${_package_setup}" ||
        error "${_package_setup} could not be sourced"
}

setup_packages() {
    for package in "${@}"; do
        load_package "${package}"

        export package_dir="${dotfiles}/${package}"

        execute_if_exists "_${package}_pre_install" || true
        execute_if_exists "_${package}_pre_install_${hosttype}" || true
        if [[ "${links_only}" -eq "0" ]]; then
            execute_if_exists "_${package}_install_deps_${hosttype}" ||
                execute_if_exists "_${package}_install_deps" || true
        fi
        execute_if_exists "_${package}_link_files_${hosttype}" || true
        execute "_${package}_link_files" || true
        execute_if_exists "_package_post_install_${hosttype}" || true
        execute_if_exists "_${package}_post_install" || true
    done
}

init_system() {
    eval "setup_packages \"\${${hosttype}_packages[@]}\""
}

clean_packages() {
    for package in "${@}"; do
        load_package "${package}"

        export package_dir="${dotfiles}/${package}"

        execute_if_exists "_${package}_pre_clean" || true
        execute_if_exists "_${package}_pre_clean${hosttype}" || true
        execute_if_exists "_${package}_clean_files_${hosttype}" ||
            execute "_${package}_clean_files"
        if [[ "${links_only}" -eq "0" ]]; then
            execute_if_exists "_${package}_clean_deps_${hosttype}" ||
                execute_if_exists "_${package}_clean_deps" || true
        fi
        execute_if_exists "_${package}_post_clean_${hosttype}" || true
        execute_if_exists "_${package}_post_clean" || true
    done
}

clean_system() {
    # This is kinda of horrible but it is constrained to one place
    eval "clean_packages \"\${${hosttype}_packages[@]}\""
}

create_package_templates() {
    for package in "$@"; do
        local _dir
        _dir="${dotfiles}/${package}"
        if [[ -d "${_dir}" ]]; then
            warn "Package ${package} already exists... not creating template"
            continue
        fi
        mkdir -p "${_dir}"
        cat >"${_dir}/setup" <<EOF
#!/usr/bin/env bash

_${package}_install_deps() {
  :;
}

_${package}_link_files() {
  :;
}

_${package}_clean_files() {
  :;
}

_${package}_clean_deps() {
  :;
}

EOF
    done
}

usage() {
    cat <<EOF
Usage: setup [OPTIONS] COMMAND

Setup script for dotfiles

Commands:
  init_system                               Setup all registered packages for
    the host.
  setup_packages PACKAGE [...]              Setup packages provided on the
    command line.
  clean_system                              Remove all packages
  clean_packages PACKAGE [...]              Remove packages and linked files.
  create_package_templates PACKAGE [...]    Create a default package directory.
  usage                                     Display this message.

Options:
  -d DIR --data-dir    Use DIR as the directory to use for expected largish
    amounts of data (Primarily useful when using a separate filesystem for
    storing non essential stuff). Default is $HOME/data.
  -l --links-only      Do not try to install or remove packages, just
  -v --verbose         Enable verbose mode
    setup/remove symlinks.
EOF
}

commands=(
    "init_system"
    "setup_packages"
    "clean_system"
    "clean_packages"
    "create_package_templates"
    "usage"
)

check_command() {
    for c in "${commands[@]}"; do
        [[ "${1}" = "${c}" ]] && return 0
    done
    return 1
}

# This is inteded to execute in a subshell.
canonicalize() {
    local _target_file
    _target_file="${0}"

    case "${hosttype}" in
        *linux)
            # The assumption here is that this uses GNU Coreutils.
            realpath "${_target_file}"
            ;;
        *)
            # Known to work on macOS (stole it from Duncan), hopefully this
            # works elsewhere too.
            cd "$(dirname "${_target_file}")"
            _target_file=$(basename "${_target_file}")

            # Iterate down a (possible) chain of symlinks
            while [[ -L "${_target_file}" ]]; do
                _target_file=$(readlink "${_target_file}")
                cd "$(dirname "${_target_file}")"
                _target_file=$(basename "${_target_file}")
            done

            # Compute the canonicalized name by finding the physical path for
            # the directory we're in and appending the target file.
            echo "$(pwd -P)/${_target_file}"
            ;;
    esac
}

dotfiles="$(dirname "$(canonicalize)")"

verbose="0"
links_only="0"
data_dir="${HOME}/data"
utilities_dir="${HOME}/.local/bin"
positional=()
while [[ "$#" -gt 0 ]]; do
    key="${1}"
    shift
    case "${key}" in
        -d | --data-dir)
            if [[ -z "${1}" ]]; then
                usage
                exit 1
            fi
            data_dir="$(realpath "${1}")"
            shift
            ;;
        -l | --links-only)
            links_only=1
            ;;
        -v | --verbose)
            verbose=1
            ;;
        *)
            positional+=("${key}") # save it in an array for later
            ;;
    esac
done
set -- "${positional[@]}" # restore positional parameters

# First use a canonical version of what the host is running exactly.
# If you are porting this to a new OS/distribution put some logic here to
# assign a canonical hosttype.
case "${OSTYPE}" in
    darwin*)
        hosttype="macos"
        ;;
    linux*)
        hosttype="$(grep -E "^ID=" /etc/os-release | cut -d '=' -f 2)"
        ;;
    *)
        error "Unknown host type"
        ;;
esac

# When setting up for a new host OS/distribution, put any specific packages in
# an appropriately named array down here. If you need a previously
# installed package installed in order to install a package put it
# after the needed package.

# Ignore unused variable warning
# shellcheck disable=2034
arch_packages=(
    "linux_init" # Dummy package for specific system configuration
    "git"
    "ssh"
    "fish"
    "neovim"
    "tmux"
    "auracle"
    "fonts" # This is needs auracle as an install dependency
    "xorg"
    "sound_linux"
    "dunst"
    "redshift"
    "i3_wm"
)

# Ignore unused variable warning
# shellcheck disable=2034
macos_packages=(
    "macos_init"
    "fonts"
    "git"
    "wezterm"
    "fish"
    "neovim"
    "tmux"
)

# Ignore unused variable warning
# shellcheck disable=2034
ubuntu_packages=(
    "linux_init"
    "fonts" # linux_init is needed to install unzip
    "git"
    "ssh"
    "fish"
    "neovim"
    "tmux"
)

if check_command "${1}"; then
    if [[ "${verbose}" -eq "1" ]]; then
        # Show exactly where we are when xtrace prints
        export PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
        # Show commands after full expansions have occured
        set -x
    fi
    [[ -n "${data_dir}" && ! -d "${data_dir}" ]] && mkdir -p "${data_dir}"
    [[ ! -d "$utilities_dir" ]] && mkdir -p "$utilities_dir"
    "$@"
else
    usage
    exit 1
fi
